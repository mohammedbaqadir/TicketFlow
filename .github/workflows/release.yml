name: Release

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: [main]

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    name: Create Release

    if: |
      github.event.workflow_run.conclusion == 'success' && 
      github.event.workflow_run.head_branch == 'main'
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      # --- Pre-release Setup ---
      - name: Confirm Required Secrets and Permissions
        run: |
          if [ -z "${{ secrets.GH_TOKEN }}" ]; then
            echo "Error: GH_TOKEN is not defined. Cannot proceed with release."
            exit 1
          fi
          # Test if GH_TOKEN has permissions by making a simple API call
          if ! curl -s -f -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
               "https://api.github.com/repos/${{ github.repository }}/releases"; then
            echo "Error: GH_TOKEN lacks necessary permissions."
            exit 1
          fi

      # --- Environment Configuration ---
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          cache: "npm"

      # --- Conditional Release Check ---
      - name: Check for Release Necessity
        id: check
        run: |
          LAST_RELEASE=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_RELEASE" ]; then
            echo "No previous releases found. Skipping release."
            echo "skip_release=true" >> $GITHUB_OUTPUT
          else
            CHANGES=$(git log --oneline $LAST_RELEASE..HEAD)
            if [ -z "$CHANGES" ]; then
              echo "No changes since last release."
              echo "skip_release=true" >> $GITHUB_OUTPUT
            else
              echo "Changes detected."
              echo "skip_release=false" >> $GITHUB_OUTPUT
            fi
          fi

      # --- Release Process ---
      - name: Semantic Release
        if: steps.check.outputs.skip_release == 'false'
        id: release
        uses: cycjimmy/semantic-release-action@v4
        with:
          retries: 2
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      # --- Post-release Tasks ---
      - name: Capture Release Outputs
        if: steps.release.outputs.new_release_published == 'true'
        run: |
          echo "New release published: Version ${{ steps.release.outputs.new_release_version }}"
          echo "Major version: ${{ steps.release.outputs.new_release_major_version }}"
          echo "Minor version: ${{ steps.release.outputs.new_release_minor_version }}"
          echo "Patch version: ${{ steps.release.outputs.new_release_patch_version }}"

      # --- Error Handling ---
      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            await github.rest.issues.create({
              owner,
              repo,
              title: `ðŸš¨ Release workflow failed on ${context.sha.substring(0, 7)}`,
              body: `Release workflow failed on commit ${context.sha}. Please check the [workflow logs](${context.serverUrl}/${owner}/${repo}/actions/runs/${context.runId}) for details.`
            });

      # --- Final Cleanup ---
      - name: Final cleanup
        if: always()
        run: echo "Final cleanup complete"

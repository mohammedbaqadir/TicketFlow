name: Release

on:
  workflow_run:
    workflows: [ "CI" ]
    types: [ completed ]
    branches: [ main ]

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  NODE_VERSION: "lts/*"
  SEMANTIC_RELEASE_VERSION: "22.0.12"
  COMMIT_ANALYZER_VERSION: "11.1.0"
  NOTES_GENERATOR_VERSION: "12.1.0"
  GITHUB_PLUGIN_VERSION: "9.3.0"

jobs:
  release:
    name: Create Release
    if: |
      github.event.workflow_run.conclusion == 'success' && 
      github.event.workflow_run.head_branch == 'main'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      error: ${{ steps.release.outputs.error }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up release lock
        if: always()
        run: |
          if [ -f ".release.lock" ]; then
            echo "Removing existing release lock"
            rm -f ".release.lock"
          fi

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install and verify release dependencies
        id: verify-deps
        run: |
          # Install dependencies with exact versions
          npm install --save-dev \
            semantic-release@${{ env.SEMANTIC_RELEASE_VERSION }} \
            @semantic-release/commit-analyzer@${{ env.COMMIT_ANALYZER_VERSION }} \
            @semantic-release/release-notes-generator@${{ env.NOTES_GENERATOR_VERSION }} \
            @semantic-release/github@${{ env.GITHUB_PLUGIN_VERSION }}

          # Verify installations using require.resolve and log versions
          node -e "
            const packages = [
              'semantic-release',
              '@semantic-release/commit-analyzer',
              '@semantic-release/release-notes-generator',
              '@semantic-release/github'
            ];
          
            packages.forEach(pkg => {
              try {
                const version = require(pkg + '/package.json').version;
                console.log(\`âœ“ \${pkg}@\${version} verified\`);
              } catch (e) {
                console.error(\`Error: \${pkg} not found\`);
                process.exit(1);
              }
            });
          "

      - name: Verify release configuration
        id: verify-config
        run: |
          if [ ! -f .releaserc.json ] && [ ! -f .releaserc.js ] && [ ! -f .releaserc.yaml ] && [ ! -f package.json ]; then
            echo "::error::No semantic-release configuration found"
            exit 1
          fi

      - name: Create Release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: semantic-release:*
        run: |
          # Check for existing lock
          if [ -f ".release.lock" ]; then
            echo "Error: Release lock exists. Previous release might have failed."
            exit 1
          fi
          
          # Create lock file
          touch .release.lock
          
          # Create temp file for output
          OUTPUT_FILE=$(mktemp)
          
          # Perform release process
          {
            echo "Running dry-run..."
            npx semantic-release --dry-run
            DRY_RUN_CODE=$?
          
            if [ $DRY_RUN_CODE -eq 0 ]; then
              echo "Dry-run successful, performing release..."
              npx semantic-release
              RELEASE_CODE=$?
            else
              RELEASE_CODE=$DRY_RUN_CODE
            fi
          } 2>&1 | tee "$OUTPUT_FILE"
          
          # Remove lock file
          rm -f .release.lock
          
          # Process results
          if [ $RELEASE_CODE -eq 0 ]; then
            # Log the full output for debugging
            echo "Release output:"
            cat "$OUTPUT_FILE"

            # Look for version in output using more robust pattern
            VERSION=$(grep -oP "Published release \K[0-9]+\.[0-9]+\.[0-9]+(?:-[0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*)?(?:\+[0-9A-Za-z-]+)?" "$OUTPUT_FILE" || echo "")
          
            if [ -n "$VERSION" ]; then
              echo "released=true" >> $GITHUB_OUTPUT
              echo "version=$VERSION" >> $GITHUB_OUTPUT
            else
              echo "error=Version number not found in release output" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "released=false" >> $GITHUB_OUTPUT
            echo "error=Release failed with code $RELEASE_CODE" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          rm -f "$OUTPUT_FILE"

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            await github.rest.issues.create({
              owner,
              repo,
              title: `ðŸš¨ Release workflow failed on ${context.sha.substring(0, 7)}`,
              body: `Release workflow failed on commit ${context.sha}. Please check the [workflow logs](${context.serverUrl}/${owner}/${repo}/actions/runs/${context.runId}) for details.`
            });
name: Release Preview

on:
  workflow_run:
    workflows: [ "CI" ]
    types: [ completed ]

# Prevents concurrent previews and cancels redundant runs
concurrency:
  group: release-preview-${{ github.ref }}-${{ github.sha }}
  cancel-in-progress: true

# Read-only permissions since this is just a preview
permissions:
  contents: read
  issues: read
  pull-requests: write  # Needed to comment on PR

jobs:
  release-preview:
    # Only proceed if the triggering CI workflow succeeded and was triggered by a PR
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'pull_request'
    name: Release Preview
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      # Fetches all history and tags for accurate versioning
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.1'

      - name: Install Semantic Release
        run: npm install -D semantic-release@24.2.0

      # Uses the exact same config as the real release workflow
      - name: Create Release Config
        run: |
          cat > .releaserc.json << EOF
          {
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "angular",
                  "parserOpts": {
                    "noteKeywords": ["BREAKING CHANGE", "BREAKING CHANGES", "BREAKING", "DEPRECATED"],
                    "revertPattern": "^(?:Revert|revert:)\\s\"?([\\s\\S]+?)\"?\\s*This reverts commit (\\w*)\\.?",
                    "revertCorrespondence": ["header", "hash"],
                    "issuePrefixes": ["#"],
                    "headerPattern": "^(\\w*)(?:\\(([-\\w\\$\\.\\-\\* ]*)\\))?: (.*)$",
                    "headerCorrespondence": ["type", "scope", "subject"],
                    "breakingHeaderPattern": "^(\\w*)(?:\\(([-\\w\\$\\.\\-\\* ]*)\\))?!: (.*)$"
                  },
                  "releaseRules": [
                    { "breaking": true, "release": "major" },
                    { "type": "feat", "release": "minor" },
                    { "type": "fix", "release": "patch" },
                    { "type": "perf", "release": "patch" },
                    { "type": "security", "release": "patch" },
                    { "type": "docs", "release": "patch" },
                    { "type": "refactor", "release": "patch" },
                    { "type": "style", "release": "patch" },
                    { "type": "build", "release": "patch" },
                    { "type": "ci", "release": false },
                    { "type": "chore", "release": false },
                    { "type": "test", "release": false }
                  ]
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "angular",
                  "parserOpts": {
                    "noteKeywords": ["BREAKING CHANGE", "BREAKING CHANGES", "BREAKING", "DEPRECATED"],
                    "revertPattern": "^(?:Revert|revert:)\\s\"?([\\s\\S]+?)\"?\\s*This reverts commit (\\w*)\\.?",
                    "revertCorrespondence": ["header", "hash"],
                    "issuePrefixes": ["#"],
                    "headerPattern": "^(\\w*)(?:\\(([-\\w\\$\\.\\-\\* ]*)\\))?: (.*)$",
                    "headerCorrespondence": ["type", "scope", "subject"]
                  },
                  "writerOpts": {
                    "groupBy": "type",
                    "commitGroupsSort": [
                      "feat",
                      "perf",
                      "fix",
                      "security",
                      "refactor",
                      "style",
                      "docs",
                      "build",
                      "test",
                      "ci",
                      "chore"
                    ],
                    "commitsSort": ["scope", "subject"],
                    "noteGroupsSort": [
                      "BREAKING CHANGE",
                      "BREAKING CHANGES",
                      "BREAKING",
                      "DEPRECATED"
                    ],
                    "commitPartial": "* {{#if scope}}**{{scope}}**: {{/if}}{{subject}}\n{{~!-- commit link --}}{{#if hash}} {{#if @root.linkReferences}}([{{shortHash}}]({{commitUrlFormat}})){{else}}{{shortHash}}{{/if}}{{/if}}",
          "footerPartial": "{{#if noteGroups}}\n{{#each noteGroups}}\n### {{title}}\n{{#each notes}}\n* {{#if commit.scope}}**{{commit.scope}}**: {{/if}}{{text}}\n{{/each}}\n{{/each}}{{/if}}\n"
                  },
                  "linkCompare": true,
                  "linkReferences": true
                }
              ],
              ["@semantic-release/github", {
                "successComment": "🔍 **Release Preview**\n\nWhen merged, this PR will create version \${nextRelease.version} with the following release notes:\n\n\${nextRelease.notes}",
                "failComment": "⚠️ Release preview failed due to the following errors:\n\n\${errors.map(error => error.message).join('\\n')}",
                "failTitle": "Release Preview Failed",
                "labels": ["has-release-preview"],
                "releasedLabels": ["has-release-preview"]
              }]
            ]
          }
          EOF

      # Runs semantic-release in dry-run mode and captures output
      - name: Run Release Preview
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Run in dry-run mode and capture output
          npx semantic-release --dry-run